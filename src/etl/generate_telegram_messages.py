import pandas as pd
import os
from datetime import datetime
import re

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CSV_FILES = {
    'blogs': 'data/processed/gpt/telegram_blogs.csv',
    'news': 'data/processed/gpt/telegram_news.csv',
}

TEMPLATE = {
    'blogs': (
        'üìÖ {date}\n\n'
        'üìù *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:*\n{tg_summary}\n\n'
        'üìä –¢–æ–ø –æ—Ü–µ–Ω–æ–∫:\n{top_companies}\n'
        '---\n'
        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è.\n'
        '–û—Ü–µ–Ω–∫–∏ (-3...+3) –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–¥–µ–ª—å—é –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.'
    ),
    'news': (
        'üìÖ {date}\n\n'
        'üì∞ *–°–∞–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:*\n\n{tg_summary}\n\n'
        'üìä –¢–æ–ø –æ—Ü–µ–Ω–æ–∫:\n{top_companies}'
        '---\n'
        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è.\n'
        '–û—Ü–µ–Ω–∫–∏ (-3...+3) –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–¥–µ–ª—å—é –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.'
    ),
}

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def get_top_companies(row, n=3):
    companies = row.index[2:]
    values = row.values[2:]
    comp_scores = [
        (comp, float(val))
        for comp, val in zip(companies, values)
        if str(val).strip() not in ('', 'nan', 'None') and abs(float(val)) > 0
    ]
    if not comp_scores:
        return '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ MOEX*, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ, –≤–Ω—É—Ç—Ä–∏ ‚Äî –ø–æ –º–æ–¥—É–ª—é –æ—Ü–µ–Ω–∫–∏
    moex = [x for x in comp_scores if x[0].startswith('MOEX')]
    other = [x for x in comp_scores if not x[0].startswith('MOEX')]
    moex.sort(key=lambda x: abs(x[1]), reverse=True)
    other.sort(key=lambda x: abs(x[1]), reverse=True)
    sorted_scores = moex + other
    top = sorted_scores[:n]

    def arrow(val):
        return 'üü¢' if val > 0 else 'üî¥'

    tokens = [f'#{c} : {v:+.1f}' for c, v in top]
    lines = [' | '.join(tokens[i:i+3]) for i in range(0, len(tokens), 3)]
    return '\n'.join(lines) + '\n'


def format_summary(summary, bullet='üîπ'):
    # –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    abbreviations = r'(?:–∫–≤|–≥|–≥–≥|–º–ª–Ω|–º–ª—Ä–¥|—Ç—Ä–ª–Ω|—Ç—ã—Å|—Ä—É–±|–¥–æ–ª–ª|–µ–≤—Ä–æ|–ø—Ä–æ—Ü|–ø\.–ø|—Ç\.–¥|—Ç\.–ø|–¥—Ä|—Å–º|—Å—Ç—Ä|—Ä–∏—Å|—Ç–∞–±–ª|—É–ª|–ø—Ä|–∫–æ—Ä–ø|–¥|–∫–≤|—ç—Ç|—Ç–µ–ª|—Ñ–∞–∫—Å|e-mail|email|vs|etc|i\.e|e\.g)'
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    # –ù–µ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ—Å–ª–µ:
    # 1. –°–æ–∫—Ä–∞—â–µ–Ω–∏–π (–∫–≤., –≥., –º–ª–Ω. –∏ —Ç.–¥.)
    # 2. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–¥–µ—Ç —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞
    # 3. –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    pattern = r'''
        (?<![–ê-–Ø–∞-—èA-Za-z])  # –ù–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –±—É–∫–≤–∞
        ''' + abbreviations + r'''  # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        \.  # –¢–æ—á–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        |  # –ò–õ–ò
        (?<=[.!?])  # –ü–æ—Å–ª–µ —Ç–æ—á–∫–∏, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        (?!["\'\s]*[–∞-—èa-z0-9])  # –ù–æ –Ω–µ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ—á–Ω–æ–π –±—É–∫–≤–æ–π –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–π (—Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫)
        \s+  # –ü—Ä–æ–±–µ–ª(—ã)
        (?=[–ê-–ØA-Z"\'¬´])  # –ü–µ—Ä–µ–¥ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π –∏–ª–∏ –∫–∞–≤—ã—á–∫–æ–π
    '''
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º negative split - —Å–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    temp_summary = summary.strip()
    
    # –ó–∞—â–∏—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω–æ–π —Ç–æ—á–µ–∫
    protected = re.sub(r'\b(' + abbreviations + r')\.', r'\1<DOT>', temp_summary, flags=re.IGNORECASE)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+(?=[–ê-–ØA-Z"\'¬´])', protected)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è—Ö
    sentences = [s.replace('<DOT>', '.').strip() for s in sentences if s.strip()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—É–ª–ª–µ—Ç—ã –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º
    sentences = [f'{bullet} {s}' for s in sentences]
    return '\n\n'.join(sentences)


def generate_messages(csv_path, mode='blogs', n=3, output_path=None, start_date=None, end_date=None):
    df = pd.read_csv(csv_path)
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if start_date:
        df = df[df['date'] >= start_date]
    if end_date:
        df = df[df['date'] <= end_date]
    messages = []
    for _, row in df.iterrows():
        bullet = 'üîπ' if mode == 'news' else 'üî∏'
        formatted_summary = format_summary(str(row['tg_summary']), bullet)
        # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É DD.MM.YYYY
        date_raw = str(row['date'])
        try:
            date_fmt = datetime.strptime(date_raw, '%Y-%m-%d').strftime('%d.%m.%Y')
        except ValueError:
            date_fmt = date_raw

        msg = TEMPLATE[mode].format(
            date=date_fmt,
            tg_summary=formatted_summary,
            top_companies=get_top_companies(row, n=n)
        )
        messages.append((date_fmt, msg))
    if output_path:
        with open(output_path, 'w', encoding='utf-8') as f:
            for _, msg in messages:
                f.write(msg + '\n' + ('-'*40) + '\n')
    else:
        for _, msg in messages:
            print(msg)
            print('-'*40)

    return messages

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –∏–∑ CSV.')
    parser.add_argument('--mode', choices=['blogs', 'news'], default='news', help='–¢–∏–ø —Ñ–∞–π–ª–∞: blogs –∏–ª–∏ news')
    parser.add_argument('--top', type=int, default=21, help='–°–∫–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–π –≤—ã–≤–æ–¥–∏—Ç—å –≤ —Ç–æ–ø–µ')
    parser.add_argument('--output', type=str, default="data/processed/gpt/output/news.txt", help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (txt)')
    parser.add_argument('--start-date', type=str, default=None, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    parser.add_argument('--end-date', type=str, default=None, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    args = parser.parse_args()

    csv_path = CSV_FILES[args.mode]
    generate_messages(
        csv_path,
        mode=args.mode,
        n=args.top,
        output_path=args.output,
        start_date=args.start_date,
        end_date=args.end_date
    ) 