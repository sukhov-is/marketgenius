"""Telegram publisher for MarketGenius.

–°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
–≤ –∫–∞–Ω–∞–ª Telegram —Å –ø–æ–º–æ—â—å—é Bot API.

–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    TG_BOT_TOKEN  ‚Äì —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ @market_genius_bot
    TG_CHAT_ID    ‚Äì @marketgenius_blog –∏–ª–∏ numeric chat ID
"""
from pathlib import Path
import os
import time
import json
import requests
import argparse
import re
from dotenv import load_dotenv

load_dotenv()

API_URL = "https://api.telegram.org/bot{token}/{method}"


def load_channel_mapping(cfg_path: Path) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {name: url}."""
    data = json.loads(cfg_path.read_text(encoding="utf-8"))
    mapping = {}
    for section in data.values():
        for url, name in section.items():
            if not url.startswith("http"):
                url_full = "https://" + url.lstrip("/")
            else:
                url_full = url
            mapping[name] = url_full
    return mapping


def linkify(text: str, mapping: dict) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ Markdown —Å—Å—ã–ª–∫–∏."""
    for name, url in mapping.items():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
        # re.escape –Ω—É–∂–µ–Ω –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        pattern = re.compile(re.escape(name), re.IGNORECASE)
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫–µ
        text = pattern.sub(lambda m: f"[{m.group(0)}]({url})", text)
    return text


def italicize_disclaimer(text: str) -> str:
    """–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–º –≤ –∫—É—Ä—Å–∏–≤."""
    lines = text.splitlines()
    for i, ln in enumerate(lines):
        if ln.startswith("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ") or ln.startswith("–û—Ü–µ–Ω–∫–∏ (" ):
            if not (ln.startswith("_") or ln.startswith("*")):
                lines[i] = f"_{ln}_"
    return "\n".join(lines)


def bold_headers(text: str) -> str:
    text = text.replace("üìù –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:", "üìù *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:*")
    text = text.replace("üì∞ –°–∞–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", "üì∞ *–°–∞–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:*")
    return text


def send_message(token: str, chat_id: str, text: str, parse_mode: str = "Markdown", max_retries: int = 5) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Ç—Ä–∞–µ–º –ø—Ä–∏ 429."""
    url = API_URL.format(token=token, method="sendMessage")
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    for attempt in range(max_retries):
        resp = requests.post(url, json=payload, timeout=20)
        if resp.status_code == 200 and resp.json().get("ok"):
            return True
        if resp.status_code == 429:
            retry_sec = resp.json().get("parameters", {}).get("retry_after", 30)
            print(f"[RATE LIMIT] waiting {retry_sec}s (attempt {attempt+1}/{max_retries})")
            time.sleep(retry_sec + 1)
            continue
        print("[ERROR]", resp.text)
        return False
    return False


def publish_from_file(file_path: Path, token: str, chat_id: str, delay: float = 1.0, mapping: dict | None = None):
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–∑ 40+ –¥–µ—Ñ–∏—Å–æ–≤, –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∫–∞–∂–¥—ã–π –±–ª–æ–∫."""
    content = file_path.read_text(encoding="utf-8")
    # –°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–æ–π –∏–∑ 40 –¥–µ—Ñ–∏—Å–æ–≤, –∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
    blocks = [b.strip() for b in content.split("-" * 40) if b.strip()]
    for block in blocks:
        if mapping:
            block = linkify(block, mapping)
        block = italicize_disclaimer(block)
        # block = bold_headers(block)
        ok = send_message(token, chat_id, block)
        if not ok:
            print("Failed to send block, aborting.")
            break
        time.sleep(delay)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª.")
    parser.add_argument("file", type=str, help="–ü—É—Ç—å –∫ txt-—Ñ–∞–π–ª—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
    parser.add_argument("--delay", type=float, default=1.0, help="–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫)")
    parser.add_argument("--config", type=str, default="configs/channels_config.json", help="JSON —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
    args = parser.parse_args()

    token = os.getenv("TG_BOT_TOKEN")
    chat_id = os.getenv("TG_CHAT_ID", "@marketgenius_blog")

    if not token:
        parser.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    cfg_path = Path(args.config)
    mapping = load_channel_mapping(cfg_path) if cfg_path.exists() else None

    publish_from_file(Path(args.file), token, chat_id, args.delay, mapping) 