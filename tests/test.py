import re
import emoji
import time

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
short_text = "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞? üöÄ"
long_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ üòäüî•üéâüíñüëçüí°üöÄüíØ‚öΩüé∂üåüüê±‚Äçüë§ü§ñüëæüíÄüëΩ –∏ –µ—â–µ –±–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏ " * 100

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
EMOJI_PATTERN = re.compile(
    "["   
    "\U0001F1E0-\U0001F1FF"  
    "\U0001F300-\U0001F5FF"  
    "\U0001F600-\U0001F64F"  
    "\U0001F680-\U0001F6FF"  
    "\U0001F700-\U0001F77F"  
    "\U0001F780-\U0001F7FF"  
    "\U0001F800-\U0001F8FF"  
    "\U0001F900-\U0001F9FF"  
    "\U0001FA00-\U0001FA6F"  
    "\U0001FA70-\U0001FAFF"  
    "\U00002600-\U00002B55"
    "\U0000FE0E-\U0000FE0F"
    "]", 
    flags=re.UNICODE
)

# –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
def remove_emoji_re(text: str) -> str:
    return EMOJI_PATTERN.sub(r"", text)

def remove_emoji_emoji(text: str) -> str:
    return emoji.replace_emoji(text, replace="")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def measure_time(func, text, iterations=1000):
    start_time = time.time()
    for _ in range(iterations):
        func(text)
    return time.time() - start_time

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
results = {
    "Regex (short text)": measure_time(remove_emoji_re, short_text, 10000),
    "Emoji (short text)": measure_time(remove_emoji_emoji, short_text, 10000),
    "Regex (long text)": measure_time(remove_emoji_re, long_text, 100),
    "Emoji (long text)": measure_time(remove_emoji_emoji, long_text, 100),
}

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏:")
for method, time_taken in results.items():
    print(f"{method}: {time_taken:.6f} —Å–µ–∫—É–Ω–¥")
